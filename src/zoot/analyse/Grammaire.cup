package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.tds.*;
import zoot.arbre.instructions.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non terminée") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    VARIABLES, DEBUT, FIN, POINTVIRGULE, ECRIRE, EGALE, FONCTIONS, OUVRE,FERME , RETOURNE;
terminal String    CSTENTIERE, IDF, TYPE, CSTBOOLEEN ;

/* Non terminals used in the grammar section.  */
non terminal LDCL, DCL, LFONC, FONC, PROGFONCT, RET, LPARAM, PARAM ;
non terminal ArbreAbstrait PROG, LINST ;
non terminal Instruction INST ;
non terminal Expression EXP ;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES LDCL FONCTIONS LFONC DEBUT LINST:li FIN
                {: RESULT = li ; :}
                ;


LINST   ::=     LINST:li  INST:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                INST:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1,TDS.getInstance().getNoActuBloc()) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
                ;


INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1) ; :}
                |
                IDF:idf EGALE EXP:e  POINTVIRGULE
                {: RESULT = new Affectation(idf,e, eleft + 1); :}
                |
                RETOURNE EXP:e POINTVIRGULE
                {: RESULT = new Retourne(e, eleft + 1); :}
                ;


LFONC  ::=      LFONC FONC | FONC;

                // Fonction sans variable et sans paramètre
FONC   ::=      TYPE:t IDF:idf OUVRE FERME DEBUT LINST:li FIN {:

                     TDS.getInstance().entreeBloc();
                    TDS.getInstance().ajouter(new EntreeFonction(idf, idfleft+1,  TDS.getInstance().getNoActuBloc()), new SymboleFonction(t,li), TDS.getInstance().getNoActuBloc());
                    TDS.getInstance().sortieBloc();
                :}
                |
                // Fonction avec parametre mais sans variable
                 TYPE:t IDF:idf OUVRE LPARAM:lp FERME DEBUT LINST:li FIN {:
                        TDS.getInstance().entreeBloc();
                        TDS.getInstance().ajouter(new EntreeFonction(idf, idfleft+1,  TDS.getInstance().getNoActuBloc()), new SymboleFonction(t,li), TDS.getInstance().getNoActuBloc());
                       TDS.getInstance().sortieBloc();
                 :}
                 |
                 // Fonction sans parametre et avec variable
                  TYPE:t IDF:idf OUVRE FERME VARIABLES LDCL:ld DEBUT LINST:li FIN {:
                        TDS.getInstance().entreeBloc();
                        TDS.getInstance().ajouter(new EntreeFonction(idf, idfleft+1,  TDS.getInstance().getNoActuBloc()), new SymboleFonction(t,li), TDS.getInstance().getNoActuBloc());
                        TDS.getInstance().sortieBloc();
                  :}
                  |
                  // Fonction avec variable et avec paramtre
                  TYPE:t IDF:idf OUVRE LPARAM:lp FERME VARIABLES LDCL:ld DEBUT LINST:li FIN {:
                        TDS.getInstance().entreeBloc();
                        TDS.getInstance().ajouter(new EntreeFonction(idf, idfleft+1,  TDS.getInstance().getNoActuBloc()), new SymboleFonction(t,li), TDS.getInstance().getNoActuBloc());
                       TDS.getInstance().sortieBloc();
                  :}
                ;




LDCL   ::=      LDCL DCL | DCL;


DCL    ::=     TYPE:t IDF:idf POINTVIRGULE
                {:
                    TDS.getInstance().ajouter(new EntreeVariable(idf, idfleft+1, TDS.getInstance().getNoActuBloc()), new SymboleVariable(t), TDS.getInstance().getNoActuBloc());
                :}
                ;

LPARAM  ::= LPARAM PARAM | PARAM;

PARAM    ::=     TYPE:t IDF:idf POINTVIRGULE
                {:
                    TDS.getInstance().ajouter(new EntreeVariable(idf, idfleft+1,  TDS.getInstance().getNoActuBloc()), new SymboleVariable(t), TDS.getInstance().getNoActuBloc());
                :}
                ;

EXP    ::=     CSTENTIERE:c
               {: RESULT = new ConstanteEntiere(c, cleft + 1) ; :}
               |
               IDF:i OUVRE FERME
               {: RESULT = new AppelFonction(i, ileft + 1); :}
               |
               IDF:i
               {: RESULT = new Idf(i,ileft+1) ; :}
               |
               CSTBOOLEEN:b
               {: RESULT = new ConstanteBooleenne(b, bleft + 1) ; :}

                ;
