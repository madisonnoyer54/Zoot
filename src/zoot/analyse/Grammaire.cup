package zoot.analyse ;

import java.util.*;
import zoot.arbre.* ;
import zoot.arbre.expressions.* ;
import zoot.tds.*;
import zoot.arbre.instructions.* ;
import zoot.exceptions.AnalyseSyntaxiqueException;

import java_cup.runtime.*;

action code {:
             :} ;

parser code {:

    public void report_error(String message, Object info) {

        HashMap<Integer, String> lesTerminaux = new HashMap<>() ;

        lesTerminaux.put(new Integer(CodesLexicaux.DEBUT), "debut") ;
        lesTerminaux.put(new Integer(CodesLexicaux.FIN), "fin") ;
        lesTerminaux.put(new Integer(CodesLexicaux.POINTVIRGULE), ";") ;

        StringBuffer m = new StringBuffer() ;

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append("\tligne : " + (s.left + 1)) ;
                if (s.right >= 0)
                    m.append(" colonne : " + (s.right+1)) ;
            }

            if (s.value != null) {
                lesTerminaux.put(CodesLexicaux.CSTENTIERE, "" + s.value) ;
            }

            if (lesTerminaux.containsKey(new Integer(s.sym))) {
                m.append(" dernier token lu : " + lesTerminaux.get(new Integer(s.sym))) ;
            }
            else {
                m.append(" expression non termin√©e") ;
            }

        }
        throw new AnalyseSyntaxiqueException("" + m) ;
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }
:};

/* ------------Declaration of Terminals and Non Terminals Section----------- */

/* Terminals (tokens returned by the scanner).  */

terminal Symbol    VARIABLES, DEBUT, FIN, POINTVIRGULE, ECRIRE, AFF, FONCTIONS, OUVRE,FERME , RETOURNE, VIRGULE, NON, SOUS, ADD, MULT,INF,EGALE,DIFF, ET,OU,SI,SINON,REPETER,FINREPETER, FINSI, JUSQUA;
terminal String    CSTENTIERE, IDF, TYPE, CSTBOOLEEN ;

/* Non terminals used in the grammar section.  */
non terminal LDCL, DCL, LFONC, FONC, PROGFONCT, RET, LPARAM, PARAM, LV, LEXP,LP,APPEL, OPER;
non terminal ArbreAbstrait PROG, LINST ;
non terminal Instruction INST ;
non terminal Expression EXP ;

/* ----------------------------Grammar Section-------------------- */

start with PROG ;

PROG    ::=     VARIABLES LDCL FONCTIONS LFONC DEBUT LINST:li FIN
                {: RESULT = li ; :}
                ;


LINST   ::=     LINST:li  INST:i
                {:
                    ((BlocDInstructions)li).ajouter(i) ;
                    RESULT = li ;
                :}
        |
                INST:i
                {:
                    BlocDInstructions b = new BlocDInstructions(ileft + 1,TDS.getInstance().getNoActuBloc()) ;
                    b.ajouter(i) ;
                    RESULT = b ;
                :}
                ;


INST    ::=     ECRIRE EXP:e POINTVIRGULE
                {: RESULT = new Ecrire(e, eleft + 1,TDS.getInstance().getNoActuBloc() ) ; :}
                |
                IDF:idf AFF EXP:e  POINTVIRGULE
                {: RESULT = new Affectation(idf,e, eleft + 1, TDS.getInstance().getNoActuBloc()); :}
                |
                RETOURNE EXP:e POINTVIRGULE
                {: RESULT = new Retourne(e, eleft + 1, TDS.getInstance().getNoActuBloc()); :}
                ;


LFONC  ::=      LFONC FONC | FONC
;



FONC ::=
                   {:   TDS.getInstance().entreeBloc();:}
                  TYPE:t IDF:idf LPARAM LV DEBUT LINST:li FIN {:


                        TDS.getInstance().ajouter(new EntreeFonction(idf, idfleft+1,  TDS.getInstance().getNoActuBloc(),TDS.getInstance().getCompteParam()), new SymboleFonction(t,li,TDS.getInstance().getCompteParam()), 0);
                       TDS.getInstance().sortieBloc();
                  :}
                ;

LV ::= VARIABLES LDCL | VARIABLES;

LDCL   ::=      LDCL DCL | DCL;


DCL    ::=     TYPE:t IDF:idf POINTVIRGULE
                {:
                    TDS.getInstance().compteParamPlus1();
                    TDS.getInstance().ajouter(new EntreeVariable(idf, idfleft+1, TDS.getInstance().getNoActuBloc()), new SymboleVariable(t, TDS.getInstance().getCompteParam2()), TDS.getInstance().getNoActuBloc());
                :}
                ;
LPARAM ::=  LP
            {:
                TDS.getInstance().sortieParam();
            :}
            ;

LP ::= OUVRE LDCL FERME | OUVRE FERME
            {:
            TDS.getInstance().sortieParam();
            :}
            ;

APPEL ::= {:  TDS.getInstance().entreeAppel();:}
            LEXP
            {: TDS.getInstance().sortieAppel();:};


OPER ::= ADD
        {: :}
        |
        MULT
        {: :}
        |
        INF
        {::}
        |
        EGALE
        {: :}
        |
        DIFF
        {: :}
        |
        ET
        {: :}
        |
        OU
        {: :};



LEXP ::=      LEXP VIRGULE EXP:e
                {:  TDS.getInstance().ajouteParamAppel(e);:}
                | EXP:e{:   TDS.getInstance().ajouteParamAppel(e);:}
                | OUVRE FERME ;

EXP    ::=     CSTENTIERE:c
               {:

               RESULT = new ConstanteEntiere(c, cleft + 1,TDS.getInstance().getNoActuBloc()) ; :}
               |
               IDF:i OUVRE APPEL FERME
               {: RESULT = new AppelFonction(i, ileft + 1, TDS.getInstance().getNoActuBloc(), TDS.getInstance().getListParam() ); :}
               |
              IDF:i OUVRE FERME
              {: RESULT = new AppelFonction(i, ileft + 1, TDS.getInstance().getNoActuBloc(), null); :}
              |
               IDF:i
               {:

               RESULT = new Idf(i,ileft+1, TDS.getInstance().getNoActuBloc()) ; :}
               |
               CSTBOOLEEN:b
               {:

               RESULT = new ConstanteBooleenne(b, bleft + 1, TDS.getInstance().getNoActuBloc()) ; :}
               |
               OUVRE EXP FERME
               {:
               :}
               |
               NON EXP
               {::}
               |
               SOUS EXP
               {: :}
             // |
              // EXP OPER EXP
              // {: :}
                ;




