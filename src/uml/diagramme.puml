@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

abstract class AnalyseException

AnalyseException -up-|> RuntimeException

AnalyseLexicaleException -up-|> AnalyseException
AnalyseSyntaxiqueException -up-|> AnalyseException
AnalyseSemantiqueException -up-|> AnalyseException

class Analyse {
  -instance: Analyse
  Analyse()
  Analyse getInstance()
  ajoute(e: AnalyseSemantiqueException)
  ArrayList<AnalyseSemantiqueException> getList()
  setList(list: ArrayList<AnalyseSemantiqueException>)
}
Analyse --"1" Analyse
Analyse --"*" AnalyseSemantiqueException


abstract class ArbreAbstrait {
   int noLigne
   protected ArbreAbstrait(int n)
   void verifier()
   String toMIPS()
}

class BlocDInstructions {
   BlocDInstructions(int n)
   void ajouter(Instruction i)
   void verifier()
   String toMIPS()
   Boolean contientRetourner()
}
class BlocFonctions {
}
class BlocMain{}

BlocDInstructions -up-|> ArbreAbstrait
BlocFonctions -up-|> BlocDInstructions
BlocMain -up-|> BlocDInstructions
BlocDInstructions -up- "*" Instruction

abstract class Instruction {
   protected Instruction(int n)
   boolean estRetourner()
}

Instruction -up-|> ArbreAbstrait
class Ecrire {
   Ecrire(int n)
   void verifier()
   String toMIPS()
   boolean estRetourner()
}
class Retourne{
   Retourne(Expression e, int n)
   void verifier()
   String toMIPS()
   boolean estRetourner()
}

Ecrire  -up-|> Instruction
Retourne  -up-|> Instruction

abstract class Expression {
   protected Expression(int n)
   Type getType()
   boolean estVariable()
   boolean estBool()
   boolean estFonction()
   String getIdf()
}

Expression  -up-|> ArbreAbstrait
Ecrire - "1" Expression

abstract class Constante {
   String cste
   protected Constante(String texte, int n)
   void verfier()
   boolean estVariable()
   Symbole getSymbole()
   Type getType()
   String getIdf()
}

Constante  -up-|> Expression

class ConstanteEntiere {
   ConstanteEntiere(String texte, int n)
   String toMIPS()
   boolean estVariable()
   boolean estBool()
   boolean estFonction()
   Type getType()
}

class ConstanteBooleenne {
   ConstanteBooleenne(String texte, int n)
   String toMIPS()
   boolean estVariable()
   boolean estBool()
   boolean estFonction()
   Type getType()
}
class AppelFonction {
   String idf;
   AppelFonction(String idf,int n)
   String toMIPS()
   boolean estVariable()
   boolean estBool()
   boolean estFonction()
   Symbole getSymbole()
   Type getType()
   String getIdf()
}
AppelFonction  -up-|> Expression
class TDS {
int compteurDeplace
int noActuBloc
int noPrecBloc
TDS instance
TDS getInstance()
void ajouter (Entree e, Symbole s)
Symbole identifier(Entree e)
int getTailleZoneVariable()
void entreeBloc()
void sortieBloc()
}
class FabriqueNumero {
  int nb
  FabriqueNumero instance
  FabriqueNumero()
  FabriqueNumero getInstance()
  int genererNombre()
}
FabriqueNumero --"1" FabriqueNumero

abstract class Symbole{
String type
int deplacement
String getType()
int getDeplacement()
void setType(String type)
boolean estFonction()
}
class SymboleFonction{
 SymboleFonction(String type, ArbreAbstrait li)
 boolean estFonction()
}

SymboleFonction--"1"ArbreAbstrait

class SymboleVariable{
 SymboleVariable(String type)
 boolean estFonction()
}

TDS --"*" Symbole
Type --"1" Symbole

SymboleFonction  -up-|> Symbole
SymboleVariable  -up-|> Symbole


ConstanteEntiere  -up-|> Constante
ConstanteBooleenne  -up-|> Constante

enum Type{
ENTIER("entier")
BOOLEEN("booleen")
String type
Type(String type)
Type quelleType(String type)
Boolean concordance(Type type)
}

abstract class Entree{
String idf
int noLigne
Entree(String idf,int l)
}
class EntreeFonction{
EntreeFonction(String idf, int l)
boolean estFonction()
}
class EntreeVariable{
EntreeVariable(String idf, int l)
boolean estFonction()
}

EntreeVariable  -up-|> Entree
EntreeFonction  -up-|> Entree



class Affectation {
Affectation(String idf, Expression e, int n)
void verifier()
String toMIPS()
boolean estRetourner()
}
Affectation --"1" Idf
Affectation --"1" Expression
Affectation  -up-|> Instruction

class Idf{
String variable
Idf(String texte, int n)
void verifier()
String toMIPS()
Symbole getSymbole()
boolean estVariable()
boolean estBool()
boolean estFonction()
String getIdf()
}
Idf --|> Expression
@enduml