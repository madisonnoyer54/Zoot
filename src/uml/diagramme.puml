@startuml
skinparam class {
BackgroundColor AliceBlue
ArrowColor DarkTurquoise
BorderColor Turquoise
}

skinparam stereotypeCBackgroundColor DarkTurquoise
skinparam stereotypeIBackgroundColor Magenta
skinparam stereotypeABackgroundColor Yellow

hide stereotype
hide empty member

abstract class AnalyseException

AnalyseException -up-|> RuntimeException

AnalyseLexicaleException -up-|> AnalyseException
AnalyseSyntaxiqueException -up-|> AnalyseException
AnalyseTypeExeption -up-|> AnalyseException
AnalyseVariableNonDeclare -up-|> AnalyseException
AnalyseVariableNomDejaPris -up-|> AnalyseException

abstract class ArbreAbstrait {
   int noLigne
   protected ArbreAbstrait(int n)
   void verifier()
   String toMIPS()
}

class BlocDInstructions {
   BlocDInstructions(int n)
   void ajouter(Instruction i)
   void verifier()
   String toMIPS()
}

BlocDInstructions -up-|> ArbreAbstrait
BlocDInstructions -up- "*" Instruction

abstract class Instruction {
   protected Instruction(int n)
}

Instruction -up-|> ArbreAbstrait
class Ecrire {
   Ecrire(int n)
   void verifier()
   String toMIPS()
}

Ecrire  -up-|> Instruction

abstract class Expression {
   protected Expression(int n)
   Type getType()
   boolean estVariable()
   boolean estBool()
}

Expression  -up-|> ArbreAbstrait
Ecrire - "1" Expression

abstract class Constante {
   String cste
   protected Constante(String texte, int n)
   void verfier()
   boolean estVariable()
}

Constante  -up-|> Expression

class ConstanteEntiere {
   ConstanteEntiere(String texte, int n)
   String toMIPS()
   boolean estVariable()
   boolean estBool()
}

class ConstanteBooleenne {
   ConstanteBooleenne(String texte, int n)
   String toMIPS()
   boolean estVariable()
   boolean estBool()
}

class TDS {
int compteurDeplace
TDS instance
TDS getInstance()
void ajouter (Entree e, Symbole s)
Symbole identifier(Entree e)
int getTailleZoneVariable()
}
class FabriqueNumero {
  +int nb
  +FabriqueNumero instance
  +FabriqueNumero()
  +FabriqueNumero getInstance()
  +int genererNombre()
}

class Symbole{
String type
int deplacement
String getType()
int getDeplacement()
void setType(String type)
}

TDS --"*" Symbole
Type --"1" Symbole

ConstanteEntiere  -up-|> Constante
ConstanteBooleenne  -up-|> Constante

enum Type{
ENTIER("entier")
BOOLEEN("booleen")
String type
Type(String type)
Type quelleType(String type)
Boolean concordance(Type type)
}

class Entree{
String idf
Entree(String idf)
}

class Affectation {
Affectation(String idf, Expression e, int n)
void verifier()
String toMIPS()
}
Affectation --"1" Idf
Affectation --"1" Expression
Affectation  -up-|> Instruction

class Idf{
String variable
Idf(String texte, int n)
void verifier()
String toMIPS()
Symbole getSymbole()
boolean estVariable()
}
Idf --|> Expression
@enduml